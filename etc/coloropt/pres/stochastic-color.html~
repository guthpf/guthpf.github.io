<!DOCTYPE html>
<!-- Copyright (c) Gustavo T. Pfeiffer 2019. -->
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<style>
html, body {
    margin: 0;
    padding: 0;
    background-color: #000000;
    line-height: 0;
}
canvas {
    background-color: #ffffff;
    border: 0;
}
</style>
</head>
<body onload="initialize()" onkeydown="keyDown(event)">
<script>

var viewport = {
    start : function() {
		this.deltax = 0.0;
		this.deltay = 0.0;
		this.scale = 1.0;
	}
}

var interfaceState = {
    animationtimestamp: 0,
    mouseout: true,
    mousex: 0,
    mousey: 0,
    nextItem : null
};


const SelectionType = {
	none: 0,
	move: 1,
	zoom: 2,
	resize_t: 3,
	resize_b: 4,
	resize_l: 5,
	resize_r: 6,
	resize_tl: 7,
	resize_tr: 8,
	resize_bl: 9,
	resize_br: 10
};

var grab_data = {
	type: SelectionType.none,
	index: null,
	x: 0,
	y: 0
};

var interfaceArea = {
    canvas : document.createElement("canvas"),
    start : function() {
        this.canvas.height = 480;
        this.canvas.width = 640;
        this.canvas.style.left = "0px";
        this.context = this.canvas.getContext("2d");
        
        this.canvas.onmousemove = mouseMove;
        this.canvas.onmousedown = mouseDown;
        this.canvas.onmouseup = mouseUp;
        this.canvas.onmouseleave = mouseLeave;
        this.canvas.onwheel = mouseWheel;
        this.canvas.oncontextmenu = function(event) { event.preventDefault(); };
        
        let ct = document.createElement('center');
        ct.appendChild(this.canvas);
        document.body.appendChild(ct);
        this.interval = setInterval(updateInterface, 10);
    },
    clear : function() {
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
}

function resizeWindow() {
	let ew = window.innerWidth - 20;
	let eh = window.innerHeight - 175;
	let oldwidth = interfaceArea.canvas.width;
	interfaceArea.canvas.height = Math.min(eh, ew * 3 / 4);
	interfaceArea.canvas.width = interfaceArea.canvas.height * 4 / 3;
	interfaceArea.canvas.style.left = (ew - interfaceArea.canvas.width)/2 + "px";
	interfaceArea.canvas.style.top = (eh - interfaceArea.canvas.height)/2 + "px";
	resourceBankHeight = window.innerHeight - interfaceArea.canvas.height - 25;
	resourceBank.style.height = resourceBankHeight + "px";
	let alpha = interfaceArea.canvas.width / oldwidth;
	viewport.scale *= alpha;
	viewport.deltax *= alpha;
	viewport.deltay *= alpha;
	updateInterface();
}

var bankitems = [];
var imgobjs = [];

var animation_data = {
	start : function() {
		this.dx = 0.0;
		this.dy = 0.0;
		this.scale = 1.0;
		this.active = false;
		
		this.starttime = 0;
		this.t_last = 0.0;
		this.animation_duration = 300.0; //constant
		
		this.hoveringTime = (new Date()).getTime();
		this.hoveringIndex = null;
	}
}

function updateMouse(event) {
	if(event.target === interfaceArea.canvas) {
		interfaceState.mouseout = false;
		interfaceState.mousex = event.offsetX;
		interfaceState.mousey = event.offsetY;
	} else {
		interfaceState.mouseout = true;
	}
}

function mouseLeave() {
	interfaceState.mouseout = true;
}

function toGlobal(mousex, mousey) {
	return {
		x: (mousex - viewport.deltax) / viewport.scale,
		y: (mousey - viewport.deltay) / viewport.scale,
	}
}

function getHoveringItem(gcoordinates) {
	let mx = gcoordinates.x;
	let my = gcoordinates.y;
	let thresh = 10 / viewport.scale;
	let thresh2 = 20 / viewport.scale;
	let type = SelectionType.none;
	let index = null;
	for(let i = 0; i < imgobjs.length; i++) {
		let xin = ((mx >= imgobjs[i].x) && (mx < imgobjs[i].x + imgobjs[i].width));
		let yin = ((my >= imgobjs[i].y) && (my < imgobjs[i].y + imgobjs[i].height));
		let left = Math.abs(mx - imgobjs[i].x);
		let top = Math.abs(my - imgobjs[i].y);
		let bottom = Math.abs(my - imgobjs[i].y - imgobjs[i].height);
		let right = Math.abs(mx - imgobjs[i].x - imgobjs[i].width);
		if (xin && yin) {
			type = SelectionType.move;
			index = i;
		} else if (xin && top < thresh) {
			type = SelectionType.resize_t;
			index = i;
		} else if (xin && bottom < thresh) {
			type = SelectionType.resize_b;
			index = i;
		} else if (yin && left < thresh) {
			type = SelectionType.resize_l;
			index = i;
		} else if (yin && right < thresh) {
			type = SelectionType.resize_r;
			index = i;
		} else if (top < thresh2 && left < thresh2) {
			type = SelectionType.resize_tl;
			index = i;
		} else if (bottom < thresh2 && left < thresh2) {
			type = SelectionType.resize_bl;
			index = i;
		} else if (top < thresh2 && right < thresh2) {
			type = SelectionType.resize_tr;
			index = i;
		} else if (bottom < thresh2 && right < thresh2) {
			type = SelectionType.resize_br;
			index = i;
		}
	}
	animation_data.hoveringItem = index;
	animation_data.hoveringTime = (new Date()).getTime();
	return [type, index]
}

function mouseDown(event) {
	updateMouse(event);
	let gco = toGlobal(event.offsetX, event.offsetY);
	let ti = getHoveringItem(gco);
	if (event.button == 2 /*right*/) {
		if(ti[1] !== null) {
			//Item right-clicked: remove
			imgobjs.splice(ti[1],1);
			updateNext();
			updateScroll();
		} else {
			//Background right-clicked: zoom
			grab_data.x = event.offsetX
			grab_data.y = event.offsetY
			grab_data.vp_x = viewport.deltax;
			grab_data.vp_y = viewport.deltay;
			grab_data.vp_s = viewport.scale;
			grab_data.type = SelectionType.zoom;
			grab_data.index = null;
		}
	} else {
		grab_data.type = ti[0];
		grab_data.index = ti[1];
		if(grab_data.index !== null) {
			//Item clicked
			let io = imgobjs[grab_data.index];
			switch(grab_data.type) {
			case SelectionType.move:
				interfaceArea.canvas.style.cursor = "grabbing";
				grab_data.x = gco.x
				grab_data.y = gco.y
				break;
			case SelectionType.resize_r:
				grab_data.x = io.x;
				grab_data.y = io.y + io.height / 2;
				break;
			case SelectionType.resize_l:
				grab_data.x = io.x + io.width;
				grab_data.y = io.y + io.height / 2;
				break;
			case SelectionType.resize_b:
				grab_data.x = io.x + io.width / 2;
				grab_data.y = io.y;
				break;
			case SelectionType.resize_t:
				grab_data.x = io.x + io.width / 2;
				grab_data.y = io.y + io.height;
				break;
			case SelectionType.resize_tl:
				grab_data.x = io.x + io.width;
				grab_data.y = io.y + io.height;
				break;
			case SelectionType.resize_tr:
				grab_data.x = io.x;
				grab_data.y = io.y + io.height;
				break;
			case SelectionType.resize_bl:
				grab_data.x = io.x + io.width;
				grab_data.y = io.y;
				break;
			case SelectionType.resize_br:
				grab_data.x = io.x;
				grab_data.y = io.y;
				break;
			}
		} else {
			//Background clicked: move
			grab_data.x = gco.x
			grab_data.y = gco.y
			grab_data.type = SelectionType.move;
			grab_data.index = null;
		}
	}
}

function mouseMove(event) {
	updateMouse(event);
	let gco = toGlobal(event.offsetX, event.offsetY);
	if(grab_data.index === null) {
		if(grab_data.type === SelectionType.none) {
			//Nothing being clicked
			let ti = getHoveringItem(gco);
			switch(ti[0]) {
			case SelectionType.move:
				interfaceArea.canvas.style.cursor = "grab";
				break;
			case SelectionType.resize_t:
			case SelectionType.resize_b:
				interfaceArea.canvas.style.cursor = "ns-resize";
				break;
			case SelectionType.resize_l:
			case SelectionType.resize_r:
				interfaceArea.canvas.style.cursor = "ew-resize";
				break;
			case SelectionType.resize_tl:
			case SelectionType.resize_br:
				interfaceArea.canvas.style.cursor = "nwse-resize";
				break;
			case SelectionType.resize_tr:
			case SelectionType.resize_bl:
				interfaceArea.canvas.style.cursor = "nesw-resize";
				break;
			default:
				interfaceArea.canvas.style.cursor = "default";
				break;
			}
		} else {
			//Background being clicked
			switch(grab_data.type) {
			case SelectionType.move:
				viewport.deltax += gco.x - grab_data.x;
				viewport.deltay += gco.y - grab_data.y;
				break;
			case SelectionType.zoom:
				viewport.scale = grab_data.vp_s * Math.exp((event.offsetY - grab_data.y)/100);
				viewport.deltax = grab_data.x + viewport.scale * (grab_data.vp_x - grab_data.x) / grab_data.vp_s;
				viewport.deltay = grab_data.y + viewport.scale * (grab_data.vp_y - grab_data.y) / grab_data.vp_s;
				break;
			}
		}
	} else {
		//Item being clicked
		let io = imgobjs[grab_data.index];
		let cx = io.x + io.width/2;
		let cy = io.y + io.height/2;
		let scale;
		switch(grab_data.type) {
		case SelectionType.move:
			io.x += (gco.x - grab_data.x)
			io.y += (gco.y - grab_data.y)
			grab_data.x = gco.x
			grab_data.y = gco.y
			break;
		case SelectionType.resize_r:
			io.width = gco.x - grab_data.x;
			io.height = io.image.height * io.width / io.image.width;
			io.y = grab_data.y - io.height / 2;
			break;
		case SelectionType.resize_l:
			io.x = gco.x;
			io.width = grab_data.x - gco.x;
			io.height = io.image.height * io.width / io.image.width;
			io.y = grab_data.y - io.height / 2;
			break;
		case SelectionType.resize_b:
			io.height = gco.y - grab_data.y;
			io.width = io.image.width * io.height / io.image.height;
			io.x = grab_data.x - io.width / 2;
			break;
		case SelectionType.resize_t:
			io.y = gco.y;
			io.height = grab_data.y - gco.y;
			io.width = io.image.width * io.height / io.image.height;
			io.x = grab_data.x - io.width / 2;
			break;
		case SelectionType.resize_tl:
			scale = Math.min((grab_data.x - gco.x) / io.image.width, (grab_data.y - gco.y) / io.image.height);
			io.width = scale * io.image.width;
			io.height = scale * io.image.height;
			io.x = grab_data.x - io.width;
			io.y = grab_data.y - io.height;
			break;
		case SelectionType.resize_tr:
			scale = Math.min((gco.x - grab_data.x) / io.image.width, (grab_data.y - gco.y) / io.image.height);
			io.width = scale * io.image.width;
			io.height = scale * io.image.height;
			io.y = grab_data.y - io.height;
			break;
		case SelectionType.resize_bl:
			scale = Math.min((grab_data.x - gco.x) / io.image.width, (gco.y - grab_data.y) / io.image.height);
			io.width = scale * io.image.width;
			io.height = scale * io.image.height;
			io.x = grab_data.x - io.width;
			break;
		case SelectionType.resize_br:
			scale = Math.min((gco.x - grab_data.x) / io.image.width, (gco.y - grab_data.y) / io.image.height);
			io.width = scale * io.image.width;
			io.height = scale * io.image.height;
			break;
		}
	}
}

function mouseUp(event) {
	grab_data.index = null;
	grab_data.type = SelectionType.none;
	mouseMove(event);
}

function mouseWheel(event) {
	event.preventDefault();
	if(event.ctrlKey) {
		let oldscale = viewport.scale;
		if (event.deltaY > 0)
			viewport.scale /= 1.1;
		else
			viewport.scale *= 1.1;
		viewport.deltax = event.offsetX -  (event.offsetX - viewport.deltax)*viewport.scale/oldscale;
		viewport.deltay = event.offsetY -  (event.offsetY - viewport.deltay)*viewport.scale/oldscale;
	} else {
		viewport.deltax -= Math.sign(event.deltaX) * interfaceArea.canvas.width/10;
		viewport.deltay -= Math.sign(event.deltaY) * interfaceArea.canvas.height/10;
	}
}

function initialize() {

	window.onresize = resizeWindow;

	viewport.start();
	animation_data.start();

	bankitems.push(new BankItem("point.png", 35.36, 34.0, 276.32, 375.0, 1.0, 640.0, 480.0, 22.0, 33.0, 1.0));
	bankitems.push(new BankItem("target.png", 36.848484, 63.999998, 287.575758, 398.000001, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("point.png", 36.0, 34.615384, 94.0, 160.615385, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("2.png", 42.0, 26.419355, 106.0, 178.516129, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("circle.png", 141.317829, 145.838832, 41.0, 104.160584, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("point.png", 34.0, 32.692307, 81.0, 95.615385, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("1.png", 44.0, 27.677419, 91.0, 108.516129, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("point.png", 36.8, 35.384615, 109.0, 224.615385, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("3.png", 47.0, 29.564516, 120.0, 244.516129, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("2.png", 45.157274, 28.405382, 122.546363, 243.489779, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("circle.png", 141.75, 146.28483, 56.25, 169.594585, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("point.png", 36.75, 35.336539, 47.25, 238.153846, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("1.png", 37.147436, 23.366935, 36.205128, 262.633065, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("point.png", 39.75, 38.221154, 173.25, 212.644231, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("3.png", 38.75, 24.375, 189.25, 206.633065, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("2.png", 38.89091, 24.463637, 190.250001, 205.633065, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("circle.png", 144.75, 149.380804, 120.25, 154.991801, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("point.png", 39.75, 38.221154, 223.758549, 166.129983, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("1.png", 38.737179, 24.366935, 255.25, 171.633065, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("point.png", 39.89, 38.355769, 123.272797, 254.644231, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("3.png", 41.916665, 26.366935, 112.250001, 276.633065, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("ellipsoid.png", 133.116787, 156.167312, 126.380363, 148.096372, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("point.png", 40.495868, 38.938335, 165.710744, 152.565831, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("1.png", 42.975207, 27.032791, 166.53719, 139.65156, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("point.png", 40.396694, 38.842975, 177.748933, 270.389144, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("3.png", 34.096206, 21.447613, 185.834143, 294.864016, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("2.png", 35.691883, 22.451346, 186.313482, 294.017309, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("ellipsoid.png", 133.841984, 157.018085, 134.530694, 209.452989, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("point.png", 41.0, 39.423077, 132.0, 262.0, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("1.png", 42.102564, 26.483871, 136.897436, 286.516129, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("point.png", 42.72, 41.076923, 230.28, 285.442308, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("3.png", 41.0, 25.790323, 254.0, 294.846774, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("2.png", 39.999999, 25.16129, 254.638691, 293.08871, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("ellipsoid.png", 155.800738, 182.779221, 177.347065, 209.220779, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("point.png", 43.68, 42.0, 996.200138, 186.985661, 1.0, 640.0, 480.0, 115.864286, -622.011734, 0.996428));
	bankitems.push(new BankItem("target.png", 45.999999, 79.894736, 1011.000138, 210.038293, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("point.png", 44.079999, 42.384615, 840.000138, 117.601046, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("2.png", 48.999998, 30.82258, 857.000139, 135.574371, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("circle.png", 414.0, 427.244582, 653.000138, -74.63663, 1.0, 640.0, 480.0, 115.864286, -622.011734, 0.996428));
	bankitems.push(new BankItem("point.png", 52.0, 50.0, 1018.000138, 66.985661, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("1.png", 52.0, 32.709678, 1043.000138, 59.630822, 1.0, 640.0, 480.0, 115.864286, -622.011734, 0.996428));
	bankitems.push(new BankItem("point.png", 48.0, 46.153846, 660.000138, 170.908738, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("3.png", 54.0, 33.967742, 687.000138, 194.00179, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("objf.png", 477.788019, 214.403908, 628.173717, 98.069745, 1.0, 651.0, 490.0, 116.611458, -634.970312, 1.017187));
	bankitems.push(new BankItem("circle.png", 413.297972, 426.520095, 473.078143, -17.926618, 1.0, 640.0, 480.0, 144.833033, -291.446626, 0.698055));
	bankitems.push(new BankItem("point.png", 53.430849, 51.375817, 713.132988, -16.558585, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("point.png", 50.759308, 48.807027, 600.928201, 354.734451, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("ellipsoid3.png", 405.664033, 289.298254, 479.373015, 63.124285, 1.0, 640.0, 480.0, 144.833033, -291.446626, 0.698055));
	bankitems.push(new BankItem("point.png", 48.087765, 46.238236, 571.541233, 68.828024, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("point.png", 45.416223, 43.669445, 777.250008, 278.492737, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("ellipsoid2.png", 408.746007, 227.751466, 480.708787, 79.590025, 1.0, 640.0, 480.0, 144.833033, -291.446626, 0.698055));
	bankitems.push(new BankItem("point.png", 45.841634, 44.078494, 499.167577, 145.808414, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("point.png", 45.841633, 44.078494, 811.463705, 223.16617, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("ellipsoid2.png", 412.441881, 229.81079, 625.364889, 117.708374, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("point.png", 48.248319, 46.392614, 866.129853, 167.29668, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("point.png", 45.841634, 44.078494, 764.18952, 274.738008, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("ellipsoid2.png", 414.007252, 230.683008, 685.399213, 67.109191, 1.0, 640.0, 480.0, 144.833033, -291.446626, 0.698055));
	bankitems.push(new BankItem("out00003.png", 44.00156, 408.33447, 567.713075, 579.036578, 1.0, 651.0, 490.0, -562.018697, -533.732561, 1.081679));
	bankitems.push(new BankItem("out00004.png", 32.927927, 397.604716, 638.788526, 578.728283, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("out00005.png", 57.401731, 458.4166, 691.781964, 577.319937, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("out00006.png", 57.697262, 458.4166, 757.826457, 575.980657, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("out00007.png", 64.294221, 316.673029, 869.834544, 573.633684, 1.0, 795.0, 595.0, -393.816778, -855.212665, 0.992082));
	bankitems.push(new BankItem("out00008.png", 102.194783, 458.416599, 942.397351, 575.05077, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("out00009.png", 101.020019, 458.416601, 1049.572597, 573.573357, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("out00010.png", 82.240852, 458.416601, 1153.183226, 571.580453, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("out00011.png", 125.988668, 458.4166, 1239.751955, 569.279254, 0, 0, 0, 0, 0, 0));
	bankitems.push(new BankItem("out00012.png", 61.54302, 458.416598, 1369.219714, 569.279255, 0, 0, 0, 0, 0, 0));


	interfaceArea.start();

	createResourceBank();
	
	let font = document.createElement("font");
	font.size = "2";
	font.color = "#ffffff";
	font.innerHTML += '<br/><span style="float:left; visibility:hidden">_</span>Press T for presentation mode. (Then T again for full screen.)'
	//font.innerHTML += '<span style="float:right">Copyright &copy; Gustavo T. Pfeiffer 2019.</span>'
	font.style.lineHeight = "0.7";
	document.body.appendChild(font);
	
	resizeWindow();
	updateNext();
	updateScroll();
}

function BankItem(src, height, width, y, x, vp_available, vp_scrw, vp_scrh, vp_offsetx, vp_offsety, vp_scale) {
	this.src = src;
	this.lc_height = height;
	this.lc_width = width;
	this.lc_y = y;
	this.lc_x = x;
	this.vp_available = vp_available;
	this.vp_scrw = vp_scrw;
	this.vp_scrh = vp_scrh;
	this.vp_offsetx = vp_offsetx;
	this.vp_offsety = vp_offsety;
	this.vp_scale = vp_scale;
}
function ImgObj(index) {
	this.index = index;
	this.image = new Image();
	this.image.src = bankitems[index].src;
	this.width = bankitems[index].lc_width;
	this.height = bankitems[index].lc_height;
	this.x = bankitems[index].lc_x;
	this.y = bankitems[index].lc_y;
	this.resizecanvas = document.createElement('canvas');
    this.resizecanvas.width = this.image.width;
    this.resizecanvas.height = this.image.height;
	this.resizecanvas2 = document.createElement('canvas');
    this.resizecanvas2.width = this.image.width;
    this.resizecanvas2.height = this.image.height;
    this.resizecanvasw = 0;
    this.resizecanvash = 0;
	this.update = function(draw_border) {
		if(!(this.resizecanvas.width > 0 && this.resizecanvas.height > 0 && this.resizecanvas2.width > 0 && this.resizecanvas2.height > 0)) {
			this.resizecanvas.width = this.image.width;
			this.resizecanvas.height = this.image.height;
			this.resizecanvas2.width = this.image.width;
			this.resizecanvas2.height = this.image.height;
		}
		let ctx = interfaceArea.context;
		let drawx = viewport.deltax + viewport.scale * this.x;
		let drawy = viewport.deltay + viewport.scale * this.y;
		let draww = viewport.scale * this.width;
		let drawh = viewport.scale * this.height;
		if(draw_border) {
			ctx.strokeStyle = "black";
			ctx.beginPath();
			ctx.moveTo(drawx,drawy);
			ctx.lineTo(drawx+draww,drawy);
			ctx.lineTo(drawx+draww,drawy+drawh);
			ctx.lineTo(drawx,drawy+drawh);
			ctx.closePath();
			ctx.stroke();
		}
		ctx.drawImage(this.image, drawx, drawy, draww, drawh);
		if(interfaceArea.listenerwindow) {
			let listener_iA = interfaceArea.listenerwindow.interfaceArea;
			ctx = listener_iA.context;
			let scale = listener_iA.canvas.width / interfaceArea.canvas.width;
			drawx *= scale;
			drawy *= scale;
			draww *= scale;
			drawh *= scale;
			//If image is completely out of the canvas, no need to render
			if(drawx > listener_iA.canvas.width || drawy > listener_iA.canvas.height || drawx + draww <= 0 || drawy + drawh <= 0)
				return;
			//If animation is active, never downscale image
			if(animation_data.active) {
				//If pre-downscaled image is available
				if(this.resizecanvasw > 0 && this.resizecanvash > 0) {
					//Draw pre-downscaled image
					ctx.drawImage(this.resizecanvas,
					0, 0, this.resizecanvasw, this.resizecanvash,
					drawx, drawy, draww, drawh);
				} else {
					//Draw original image
					ctx.drawImage(this.image, drawx, drawy, draww, drawh);
				}
			} else {
				//If image is to be enlarged
				if(draww > this.image.width || drawh > this.image.height || !(draww > 0) || !(drawh > 0)) {
					//Invalidate pre-downscaled image
					this.resizecanvasw = 0;
					this.resizecanvash = 0;
					//Draw original image
					ctx.drawImage(this.image,
					drawx, drawy, draww, drawh);
				} else {
					//If pre-downscaled image is invalid
					if(!(this.resizecanvasw == draww && this.resizecanvash == drawh)) {
						//Compute downscaled image
						let direction = false;
						let lw = draww*2;
						let lh = drawh*2;
						while(lw < this.image.width && lh < this.image.height) {
							lw *= 2;
							lh *= 2;
							direction = !direction;
						}
						lw /= 2;
						lh /= 2;
						let rcc = this.resizecanvas.getContext('2d');
						let rcc2 = this.resizecanvas2.getContext('2d');
						if(direction) {
							rcc2.clearRect(0, 0, lw, lh);
							rcc2.drawImage(this.image, 0, 0, lw, lh);
						} else {
							rcc.clearRect(0, 0, lw, lh);
							rcc.drawImage(this.image, 0, 0, lw, lh);
						}
						while(lw != draww) {
							direction = !direction;
							if(direction) {
								rcc2.clearRect(0, 0, lw, lh);
								rcc2.drawImage(this.resizecanvas,
								0, 0, lw, lh,
								0, 0, lw/2, lh/2);
							} else {
								rcc.clearRect(0, 0, lw, lh);
								rcc.drawImage(this.resizecanvas2,
								0, 0, lw, lh,
								0, 0, lw/2, lh/2);
							}
							lw /= 2;
							lh /= 2;
						}
						this.resizecanvasw = draww;
						this.resizecanvash = drawh;
					}
					//Render downscaled image
					ctx.drawImage(this.resizecanvas,
					0, 0, draww, drawh,
					drawx, drawy, draww, drawh);
				}
			}
		}
	}
}

function updateInterface() {
	interfaceArea.clear();
	if(interfaceArea.listenerwindow)
		interfaceArea.listenerwindow.interfaceArea.clear();
	animate();
	let curtime = (new Date()).getTime();
	for(let i=0; i<imgobjs.length; i++)
		imgobjs[i].update(curtime - animation_data.hoveringTime < 500.0 && animation_data.hoveringItem === i);
	if(interfaceArea.listenerwindow && !interfaceState.mouseout) {
		let scale = interfaceArea.listenerwindow.interfaceArea.canvas.width / interfaceArea.canvas.width;
		let mx = interfaceState.mousex * scale;
		let my = interfaceState.mousey * scale;

		//Render fake cursor
		let fake_cursor = ".*______________..*_____________. .*____________.  .*___________.   .*__________.    .*_________.     .*________.      .*_______.       .*______.        .*_____.     .....*____.   / .****_____.  ..  .________. ./_. .________../__.  ._______./____. ._______/_____.  ._____________../______";
		let ctx = interfaceArea.listenerwindow.interfaceArea.context;
		let cv = document.createElement('canvas');
		cv.width = 16;
		cv.height = fake_cursor.length / 16;
		let ctx2 = cv.getContext("2d");
		let imgData = ctx2.createImageData(cv.width, cv.height);

		for(let k = 0; k < fake_cursor.length; k++)
			if(fake_cursor[k] != '_') {
				let newval = 
					(fake_cursor[k]=='.')?0:(
					(fake_cursor[k]=='/')?0:(
					(fake_cursor[k]=='*')?0:
					0xff));
				let opacity = 
					(fake_cursor[k]=='.')?0xff:(
					(fake_cursor[k]=='/')?0x80:(
					(fake_cursor[k]=='*')?0x40:
					0xff));
				imgData.data[4*k] = newval;
				imgData.data[4*k+1] = newval;
				imgData.data[4*k+2] = newval;
				imgData.data[4*k+3] = opacity;
			} else {
				imgData.data[4*k+3] = 0; //transparent
			}
		ctx2.putImageData(imgData, 0, 0);
		ctx.drawImage(cv, mx, my, cv.width, cv.height);
	}
}

function updateNext() {
	//Update interfaceState.nextItem
	let i0 = bankitems.length - 1;
	if (imgobjs.length > 0)
		i0 = imgobjs[imgobjs.length - 1].index
	let visible = [];
	for(let i = 0; i < bankitems.length; i++)
		visible.push(false);
	for(let i = 0; i < imgobjs.length; i++)
		visible[imgobjs[i].index] = true;
	for(let i = 0; i < bankitems.length; i++) {
		bankitems[i].cv.style.opacity = (visible[i])?0.5:1.0;
		bankitems[i].cv.style.border = "1px solid #000000";
	}
	for(let di = 0; di < bankitems.length; di++) {
		let j = (i0+1+di) % bankitems.length;
		if(!visible[j]) {
			interfaceState.nextItem = j;
			return;
		}
	}
	interfaceState.nextItem = null;
}

function updateScroll() {
	//Update scroll
	let next = interfaceState.nextItem;
	if(next !== null) {
		bankitems[next].cv.style.border = "2px solid #ffff00";
		let up = bankitems[next].cv.offsetTop - resourceBank.offsetTop;
		let down = bankitems[next].cv.offsetTop + bankitems[next].cv.height - resourceBank.offsetTop - resourceBankHeight;
		if(resourceBank.scrollTop > up)
			resourceBank.scrollTop = up;
		if(resourceBank.scrollTop < down)
			resourceBank.scrollTop = down;
	}
}

function spacePressed(index=-1) {
	if(index===-1) {
		let next = interfaceState.nextItem;
		if (next !== null) {
			imgobjs.push(new ImgObj(next));
			viewPortAutoSet();
		}
	} else {
		imgobjs.push(new ImgObj(index));
		viewPortAutoSet();
	}
	updateNext();
	updateScroll();
}

function keyDown(event) {
	switch(event.code) {
	case "ArrowLeft":
	case "KeyA":
		viewport.deltax += interfaceArea.canvas.width/10;
		break;
	case "ArrowRight":
	case "KeyD":
		viewport.deltax -= interfaceArea.canvas.width/10;
		break;
	case "ArrowUp":
		event.preventDefault();
	case "KeyW":
		viewport.deltay += interfaceArea.canvas.height/10;
		break;
	case "ArrowDown":
		event.preventDefault();
	case "KeyS":
		viewport.deltay -= interfaceArea.canvas.height/10;
		break;
	case "NumpadAdd":
		{
			event.preventDefault();
			let oldscale = viewport.scale;
			viewport.scale *= 1.1;
			viewport.deltax = interfaceArea.canvas.width/2 -  (interfaceArea.canvas.width/2 - viewport.deltax)*viewport.scale/oldscale;
			viewport.deltay = interfaceArea.canvas.height/2 -  (interfaceArea.canvas.height/2 - viewport.deltay)*viewport.scale/oldscale;
		}
		break;
	case "NumpadSubtract":
		{
			event.preventDefault();
			let oldscale = viewport.scale;
			viewport.scale /= 1.1;
			viewport.deltax = interfaceArea.canvas.width/2 -  (interfaceArea.canvas.width/2 - viewport.deltax)*viewport.scale/oldscale;
			viewport.deltay = interfaceArea.canvas.height/2 -  (interfaceArea.canvas.height/2 - viewport.deltay)*viewport.scale/oldscale;
		}
		break;
	case "Space":
		event.preventDefault();
		spacePressed();
		break;
	case "KeyT":
		//TODO: check if interfaceArea.listenerwindow already created: close existing? focus? do something
		//TODO: set interfaceArea.listenerwindow to null when child window is closed
		//TODO: close child window automatically when parent window is closed 
		interfaceArea.listenerwindow = window.open("","listenerWindow", "width=640,height=480");
		if (interfaceArea.listenerwindow) {
			let output = '<!DOCTYPE html>\n<html>\n<head>\n<meta name="viewport" content="width=device-width, initial-scale=1.0"/>\n<style>\nhtml, body {\n    margin: 0 !important;\n    padding: 0 !important;\n    background-color: #000000;\n}\ncanvas {\n    background-color: #ffffff;\n    position: absolute;\n}\n</style>\n</head>\n<body onkeydown="keyDown(event)">\n<script>\n\nvar interfaceArea = {\n    canvas : document.createElement("canvas"),\n    start : function() {\n        this.canvas.height = 480;\n        this.canvas.width = 640;\n        this.canvas.style.left = "0px";\n        this.context = this.canvas.getContext("2d");\n        document.body.insertBefore(this.canvas, document.body.childNodes[0]);\n    },\n    clear : function() {\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n}\n\nfunction resizeWindow() {\n\tlet ew = window.innerWidth;\n\tlet eh = window.innerHeight;\n\tinterfaceArea.canvas.height = Math.min(eh, ew * 3 / 4);\n\tinterfaceArea.canvas.width = interfaceArea.canvas.height * 4 / 3;\n\tinterfaceArea.canvas.style.left = (ew - interfaceArea.canvas.width)/2 + "px";\n\tinterfaceArea.canvas.style.top = (eh - interfaceArea.canvas.height)/2 + "px";\n\twindow.opener.updateInterface();\n}\n\nfunction initialize() {\n\tinterfaceArea.start();\n\twindow.onresize = resizeWindow;\n}\n\n function keyDown(event) {\n\tevent.preventDefault();\n\tif(event.code == "KeyT") {\n\t\t//To fullscreen\n\t    document.documentElement.requestFullscreen();\n\t} else {\n\t\t//Redirect event to window.opener\n\t\twindow.opener.keyDown(event)\n\t}\n }\n\n</scr'+'ipt>\n</body>\n</html>\n'
			interfaceArea.listenerwindow.document.write(output);
			interfaceArea.listenerwindow.initialize();
		}
	    break;
	case "Backspace":
		backspacePressed();
		break;
	case "Delete":
		imgobjs.splice(0, imgobjs.length);
		updateNext();
		updateScroll();
		break;
	}
}

var resourceBank;
var resourceBankHeight;

function createResourceBank() {
	resourceBank = document.createElement('div');
	resourceBank.style.cssText = 'overflow-y:scroll; background-color:#808080';
	document.body.appendChild(resourceBank);
	for(let i = 0; i < bankitems.length; i++) {
		bankitems[i].cv = document.createElement('canvas');
		let cv = bankitems[i].cv;
		cv.style.backgroundColor = "#000000";
		cv.width = 100;
		cv.height = 100;
		let ctx = cv.getContext("2d");
		ctx.clearRect(0, 0, cv.width, cv.height);
		let img = new Image();
		img.onload = function() {
			let scale = Math.min(cv.width / img.width, cv.height / img.height);
			let draww = img.width * scale;
			let drawh = img.height * scale;
			let drawx = (cv.width - draww)/2;
			let drawy = (cv.height - drawh)/2;
			ctx.fillStyle = "#ffffff";
			ctx.fillRect(drawx, drawy, draww, drawh);
			if (scale > 1) {
				ctx.drawImage(img, drawx, drawy, draww, drawh);
			}
			else {
				let resizecanvas = document.createElement('canvas');
				resizecanvas.width = img.width;
				resizecanvas.height = img.height;
				let resizecanvas2 = document.createElement('canvas');
				resizecanvas2.width = img.width;
				resizecanvas2.height = img.height;
				let direction = false;
				let lw = draww*2;
				let lh = drawh*2;
				while(lw < img.width && lh < img.height) {
					lw *= 2;
					lh *= 2;
					direction = !direction;
				}
				lw /= 2;
				lh /= 2;
				let rcc = resizecanvas.getContext('2d');
				let rcc2 = resizecanvas2.getContext('2d');
				if(direction) {
					rcc2.clearRect(0, 0, lw, lh);
					rcc2.drawImage(img, 0, 0, lw, lh);
				} else {
					rcc.clearRect(0, 0, lw, lh);
					rcc.drawImage(img, 0, 0, lw, lh);
				}
				while(lw != draww) {
					direction = !direction;
					if(direction) {
						rcc2.clearRect(0, 0, lw, lh);
						rcc2.drawImage(resizecanvas,
						0, 0, lw, lh,
						0, 0, lw/2, lh/2);
					} else {
						rcc.clearRect(0, 0, lw, lh);
						rcc.drawImage(resizecanvas2,
						0, 0, lw, lh,
						0, 0, lw/2, lh/2);
					}
					lw /= 2;
					lh /= 2;
				}
				//Render downscaled image
				ctx.drawImage(resizecanvas,
				0, 0, draww, drawh,
				drawx, drawy, draww, drawh);
			}
		}
		img.src = bankitems[i].src;
		cv.oncontextmenu = function(evt) { evt.preventDefault(); backspacePressed(i); }
		cv.onclick = function() {
			if (interfaceState.nextItem === i) {
				spacePressed(i);
			} else {
				updateNext();
				interfaceState.nextItem = i;
				updateScroll();
			}
		}
		resourceBank.appendChild(cv);
	}
}

function backspacePressed(index = -1) {
	if(index === -1) {
		if(imgobjs.length > 0) {
			imgobjs.pop();
			viewPortAutoSet();
		}
	} else {
		for(let i = 0; i < imgobjs.length; i++) {
			if(imgobjs[i].index === index) {
				imgobjs.splice(i, 1);
				i--;
			}
		}
	}
	updateNext();
	updateScroll();
}
 
function animate() {
	//Animate (if necessary)
	if(animation_data.active) {
		let timenow = (new Date()).getTime();
		let t = (timenow - animation_data.starttime)/animation_data.animation_duration;
		if(t >= 1) {
			t = 1;
			animation_data.active = false;
		}
		t = 1-t;
		t = 3*Math.pow(t,2) - 2*Math.pow(t,3);
		t = 1-t;
		let dt = t-animation_data.t_last;
		if(Math.abs(animation_data.scale-1)<1e-8) {
			viewport.deltax += animation_data.dx*dt;
			viewport.deltay += animation_data.dy*dt;
		} else {
			let scale = Math.pow(animation_data.scale, dt);
			let cx = - animation_data.dx / (animation_data.scale - 1);
			let cy = - animation_data.dy / (animation_data.scale - 1);
			viewport.scale *= scale;
			viewport.deltax = cx + scale*(viewport.deltax - cx);
			viewport.deltay = cy + scale*(viewport.deltay - cy);
		}
		animation_data.t_last = t;
	}
}

//Updates screen viewport using top item viewport data
function viewPortAutoSet() {
	let scrw = interfaceArea.canvas.width;
	let scrh = interfaceArea.canvas.height;

	if(imgobjs.length > 0) {
		let topitem = imgobjs[imgobjs.length-1];

		let use_custom_viewport = false;
	
		//Custom Viewport
		if(bankitems[topitem.index].vp_available) {
			use_custom_viewport = true;
			let vpscale = bankitems[topitem.index].vp_scale * Math.min(scrw/bankitems[topitem.index].vp_scrw, scrh/bankitems[topitem.index].vp_scrh);
			let vpx = scrw/2 - vpscale * (bankitems[topitem.index].vp_scrw/2 - bankitems[topitem.index].vp_offsetx) / bankitems[topitem.index].vp_scale;
			let vpy = scrh/2 - vpscale * (bankitems[topitem.index].vp_scrh/2 - bankitems[topitem.index].vp_offsety) / bankitems[topitem.index].vp_scale;
			animation_data.active = true;
			animation_data.scale = vpscale / viewport.scale;
			animation_data.dx = vpx - viewport.deltax * animation_data.scale;
			animation_data.dy = vpy - viewport.deltay * animation_data.scale;
			if(!(animation_data.scale * (topitem.x * viewport.scale + viewport.deltax) + animation_data.dx >= 0 && 
				animation_data.scale * (topitem.y * viewport.scale + viewport.deltay) + animation_data.dy >= 0 && 
				animation_data.scale * ((topitem.width+topitem.x) * viewport.scale + viewport.deltax) + animation_data.dx < scrw &&
				animation_data.scale * ((topitem.height+topitem.y) * viewport.scale + viewport.deltay) + animation_data.dy < scrh)) {
				//Object will not fit inside viewport; abort animation
				animation_data.active = false;
				use_custom_viewport = false;
			}
		}

		//Automatic Viewport
		if(!use_custom_viewport)
		{
			animation_data.active = false;
			animation_data.dx = 0;
			animation_data.dy = 0;
			animation_data.scale = 1.0;
			let marginx = ((topitem.width+topitem.x)-topitem.x)*viewport.scale/8.;
			let marginy = ((topitem.height+topitem.y)-topitem.y)*viewport.scale/8.;
			if(((topitem.width+topitem.x) - topitem.x)*viewport.scale > scrw - 2*marginx) {
				animation_data.active = true;
				animation_data.scale = Math.min(animation_data.scale, scrw/(((topitem.width+topitem.x) - topitem.x)*viewport.scale + 2.0*marginx));
			}
			if(((topitem.height+topitem.y) - topitem.y)*viewport.scale > scrh - 2*marginy) {
				animation_data.active = true;
				animation_data.scale = Math.min(animation_data.scale, scrh/(((topitem.height+topitem.y) - topitem.y)*viewport.scale + 2.0*marginy));
			}
			marginx *= animation_data.scale;
			marginy *= animation_data.scale;
			if(animation_data.scale * ((topitem.width+topitem.x)*viewport.scale+viewport.deltax) > scrw - marginx) {
				animation_data.active = true;
				animation_data.dx = scrw - marginx - animation_data.scale * ((topitem.width+topitem.x)*viewport.scale+viewport.deltax);
			}
			if(animation_data.scale * (topitem.x*viewport.scale+viewport.deltax) < marginx) {
				animation_data.active = true;
				animation_data.dx = marginx - animation_data.scale * (topitem.x*viewport.scale+viewport.deltax);
			}
			if(animation_data.scale * ((topitem.height+topitem.y)*viewport.scale+viewport.deltay) > scrh - marginy) {
				animation_data.active = true;
				animation_data.dy = scrh - marginy - animation_data.scale * ((topitem.height+topitem.y)*viewport.scale+viewport.deltay);
			}
			if(animation_data.scale * (topitem.y*viewport.scale+viewport.deltay) < marginy) {
				animation_data.active = true;
				animation_data.dy = marginy - animation_data.scale * (topitem.y*viewport.scale+viewport.deltay);
			}
		}
		if(animation_data.active) {
			//If canvas was empty before adding this item, do not animate, just scale and scroll instantly
			if(imgobjs.length == 1)
				animation_data.starttime = (new Date()).getTime() - animation_data.animation_duration;
			else
				//Animation confirmed, reset animation clock
				animation_data.starttime = (new Date()).getTime();
			animation_data.t_last = 0;
		}
	}
}
</script>
</body>
</html>	
